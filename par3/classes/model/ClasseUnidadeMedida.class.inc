<?php
/**
 * Classe de mapeamento da entidade par3.classe_unidade_medida.
 *
 * @version $Id$
 * @since 2017.05.30
 */


/**
 * Model_Classe_unidade_medida: sem descricao
 *
 * @package Model\Classe
 * @uses Simec\Db\Modelo
 * @author Daniel Da Rocha Fiuza <danielfiuza@mec.gov.br>
 *
 * @example
 * <code>
 * // -- Consultando registros
 * $model = new Model_Classe_unidade_medida($valorID);
 * var_dump($model->getDados());
 *
 * // -- Alterando registros
 * $valores = ['campo' => 'valor'];
 * $model = new Model_Classe_unidade_medida($valorID);
 * $model->popularDadosObjeto($valores);
 * $model->salvar(); // -- retorna true ou false
 * $model->commit();
 * </code>
 *
 * @property int $cniid Chave Primária - default: nextval('par3.classe_unidade_medida_cniid_seq'::regclass)
 * @property string $cnidsc Descrição da classe de unidade de medida
 * @property "char" $cnistatus status da classe de unidade de medida: indidica se a unidade de medida foi removida
 * @property "char" $cnisituacao situação da classe de unidade de medida: indidica se a unidade de medida está ativa/inativa
 * @property \Datetime(Y-m-d H:i:s) $cnidtinclusao data de inclusão da classe de unidade de medida
 * @property string $cnicpfinclusao cpf do responsável pela inclusao da classe de unidade de medida
 * @property \Datetime(Y-m-d H:i:s) $cnidtinativacao data de inativação da classe de unidade de medida
 * @property string $cnicpfinativacao cpf do responsável pela inativação da classe de unidade de ,medida
 */
class Par3_Model_ClasseUnidadeMedida extends Modelo
{
    /**
     * @var string Nome da tabela mapeada.
     */
    protected $stNomeTabela = 'par3.classe_unidade_medida';

    /**
     * @var string[] Chave primaria.
     */
    protected $arChavePrimaria = array(
        'cniid',
    );

    /**
     * @var mixed[] Chaves estrangeiras.
     */
    protected $arChaveEstrangeira = array(
    );

    /**
     * @var mixed[] Atributos da tabela.
     */
    protected $arAtributos = array(
        'cniid' => null,
        'cnidsc' => null,
        'cnistatus' => null,
        'cnisituacao' => null,
        'cnidtinclusao' => null,
        'cnicpfinclusao' => null,
        'cnidtinativacao' => null,
        'cnicpfinativacao' => null,
    );

    public function verificarExisteClasseUnidadeMedida(array $arrPost)
    {
        $where = $arrPost['cniid']?" AND cniid != {$arrPost['cniid']}":'';
        $sql = "SELECT * FROM {$this->stNomeTabela} WHERE upper(cnidsc) = '".str_to_upper($arrPost['cnidsc'])."' AND cnistatus = 'A' {$where}";
        return $this->pegaLinha($sql,0,0);
    }

    //Cabeçaçho: 'Código','Ciclo','Início','Fim','Duração Ciclo','Anos','Vigência','Situação'
    public function montarSQLSimples($arrPost)
    {
        $cnidsc = sanitizar_string_pesquisa($arrPost['cnidsc']);
        $where  = $arrPost['cnidsc']?" AND upper(removeacento(cnidsc)) LIKE '%{$cnidsc}%'":'';
        $where .= $arrPost['cnisituacao']?" AND cnisituacao = '{$arrPost['cnisituacao']}'":'';
        $where .= $arrPost['cniid']?" AND cniid = {$arrPost['cniid']}":'';
        $where .= $arrPost['cnivigencia']?" AND cnivigencia = '{$arrPost['cnivigencia']}'":'';

        $orderBy = $arrPost['ordenacao']? "ORDER BY {$arrPost['ordenacao']['campo']} {$arrPost['ordenacao']['sentido']}":"";

        $sql = "SELECT
                cniid as id,
                ROW_NUMBER() OVER ({$orderBy}) AS qtd,
                cniid as codigo,
                cnidsc as descricao,
                cnisituacao
                FROM {$this->stNomeTabela}
                WHERE cnistatus = 'A'
                {$where}
                {$orderBy}
                ";
        return $sql;
    }

    public function validarInput(array $campos)
    {
        //campos
        $erros['erros']['cnidsc'] = array();
        //Validações
        if($campos['cnidsc'] == '' || $campos['cnidsc'] == null){array_push($erros['erros']['cnidsc'],'O campo não pode ser vazio');}
        if($campos['cnidsc']){
            if ($this->verificarExisteClasseUnidadeMedida($campos)) {array_push($erros['erros']['cnidsc'], 'Já existe Classe Unidade de Medida com a descrição informada');}
        }
        //CASO HAJA ERROS, RETORNA ARRAY DE ERROS
        foreach ($erros['erros'] as $key => $value){
            if (!empty($erros['erros'][$key])){
                return $erros;
            }
        }
        return false;
    }

    public function recuperarTodos($stCampos = '*', $arClausulas = null, $stOrdem = null, array $opcoes = array())
    {
        return parent::recuperarTodos($stCampos, $arClausulas, $stOrdem, $opcoes); // TODO: Change the autogenerated stub
    }

    public function listarClassesArray()
    {
        $rsClasseUnidadeMedida = $this->recuperarTodos('cniid,cnidsc',array("cnistatus = 'A'"));
        $classes = array();
        foreach($rsClasseUnidadeMedida as $classe){
            $classes[] = $classe;
        }
        return $classes;
    }

    public function listarClassesDescricao()
    {
        $rsClasseUnidadeMedida = $this->recuperarTodos('cnidsc',array("cnistatus = 'A'"));
        $classes = array();
        foreach($rsClasseUnidadeMedida as $classe){
            $classes[] = $classe['cnidsc'];
        }
        return $classes;
    }
}
